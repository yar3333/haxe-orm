package ;

import hant.PathTools;
import hant.FlashDevelopProject;
import stdlib.FileSystem;
import hant.Log;
import haxe.io.Path;
import sys.io.File;
using stdlib.StringTools;

class OrmOrmGenerator 
{
	public static function make(log:Log, project:FlashDevelopProject, tables:Array<OrmTable>, customOrmClassName:String, autogenOrmClassName:String)
	{
		log.start("MANAGERS => " + customOrmClassName);
		
		var basePath = PathTools.path2normal(project.srcPath) + "/";
		
		var autogenOrm = getAutogenOrm(tables, autogenOrmClassName);
		var destFileName = basePath + autogenOrmClassName.replace(".", "/") + ".hx";
		FileSystem.createDirectory(Path.directory(destFileName));
		File.saveContent(
			 destFileName
			,"// This is autogenerated file. Do not edit!\n\n" + autogenOrm.toString()
		);
		
		log.finishOk();
	}
	
	static function getAutogenOrm(tables:Array<OrmTable>, fullClassName:String) : HaxeClass
	{
		var clas = new HaxeClass(fullClassName);
		
		for (t in tables)
		{
			clas.addVar( { haxeName:t.varName, haxeType:t.customManagerClassName, haxeDefVal:null }, false, false, true);
		}
		
		clas.addMethod(
			  "new"
			, [
				{ haxeName:"db", haxeType:"orm.Db", haxeDefVal:null } 
			  ]
			, "Void"
			, Lambda.map(tables, function(t) return "this." + t.varName + " = new " + t.customManagerClassName + "(db, cast this);").join("\n")
		);
        
		return clas;
	}
}